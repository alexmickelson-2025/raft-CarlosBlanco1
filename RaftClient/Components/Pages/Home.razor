@page "/"
@using System.Text.Json
@using System.Collections.Concurrent
@using myclasslib
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

@foreach(var url in Urls)
{
    <div>@url</div>
}

<div class="d-flex gap-5">
    @foreach (var kvp in data)
    {
        var timeoutRemaining = DateTime.Now - kvp.Value.ElectionStartedAt;
        var maxIntervalMilliseconds = 300 * ServerSimulatioNode.IntervalScaleValue;
        var percentageRemaining = (int)(100 * (Math.Abs(timeoutRemaining.TotalMilliseconds) / maxIntervalMilliseconds));
        bool? SucessState = null;
        var nodeId = kvp.Value.Id; 
        string urlToSendCommandTo = $"http://node{nodeId}:8080";

        <div class="d-flex flex-column gap-2">
            <div>
                <p>Create New Command</p>
                    <form @onsubmit="() => SendCommand(urlToSendCommandTo, kvp.Value.Term)">
                    <label>
                        Key
                        <input type="text" @bind="Key">
                    </label>
                    <label>
                        Value
                        <input type="text" @bind="Value">
                    </label>
                    <button type="submit">Send Command</button>
                </form>

                @if (SuccessStates.ContainsKey(urlToSendCommandTo) && SuccessStates[urlToSendCommandTo].HasValue)
                {
                    if (SuccessStates[urlToSendCommandTo].Value)
                    {
                        <div class="p-3 mb-2 bg-success text-white">Command Appended Successfully</div>
                    }
                    else
                    {
                        <div class="p-3 mb-2 bg-danger text-white">Error While Appending Command</div>
                    }
                }

            </div>

            <div class="d-flex flex-column gap-2 border border-black p-3">

                <p>@kvp.Value.Id</p>
                <p>@kvp.Value.State</p>
                <p>Election Interval: @kvp.Value.ElectionTimeout</p>
                <p>Current Term: @kvp.Value.Term</p>
                <p>Leader is @kvp.Value.CurrentTermLeader</p>
    using myclasslib;
                <div class="progress" role="progressbar" aria-label="Basic example"
                    aria-valuenow=@(Math.Abs(timeoutRemaining.TotalMilliseconds)) aria-valuemin="0"
                    aria-valuemax="@(maxIntervalMilliseconds)">
    using System.Text.Json;
                    <div class="progress-bar bg-dark-subtle" style="width: @percentageRemaining%;">@percentageRemaining
                    </div>
                </div>
                <div>
                    <div>Commit Index: @kvp.Value.CommittedEntryIndex</div>
                </div>
                <div>
                    <p>LOGS</p>
                    <div>
                        @for (int i = 0; i < kvp.Value.Logs.Count; i++)
                        {
                            <div>
                                <p>Index: @i</p>
                                <p>Term: @kvp.Value.Logs[i].Term</p>
                                <p>Command: @kvp.Value.Logs[i].Command</p>

                                @if (i <= kvp.Value.CommittedEntryIndex)
                                {
                                    <div class="p-3 mb-2 bg-success text-white">Commited</div>
                                }
                                else
                                {
                                    <div class="p-3 mb-2 bg-danger text-white">Not Commited</div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

Welcome to your new app.

@code{
    string[] Urls = Environment.GetEnvironmentVariable("NODE_URLS").Split(',');
    HttpClient client = new();
    ConcurrentDictionary<string, NodeDataDTO> data = new();
    private Timer timer;
    private string Key { get; set; } = "";
    private string Value { get; set; } = "";
    private Dictionary<string, bool?> SuccessStates = new();
    protected override void OnInitialized()
    {
        timer= new Timer(async _ =>
        {
            await Task.WhenAll(Urls.Select(async url =>
            {
                try
                {
                var nodeData = await client.GetFromJsonAsync<NodeDataDTO>(url + "/nodeData");
                if(nodeData != null)
                {
                    data[url] = nodeData;
                } 
                else
                {
                    Console.WriteLine("Couldn't get data for" + url);

                }
                }
                catch(HttpRequestException)
                {
                    Console.WriteLine("kvp.Value" + url + "is down");
                }
                await InvokeAsync(StateHasChanged);
            }
            ));
        }, null, 0, 200);
    }

    private void SendCommand(string url, int nodeTerm)
    {
        LogEntry logEntry = new LogEntry(_term: nodeTerm, _command: $"SET {Key} -> {Value}");
        var result = client.PostAsJsonAsync(url + "/request/command", JsonSerializer.Serialize(logEntry));
        SuccessStates[url] = result.IsCompletedSuccessfully;
        StateHasChanged();
    }
}