@using myclasslib
@rendermode InteractiveServer
@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<button class="mb-3" @onclick="startSimulation">Start New Simulation</button>

<div>
    <div>
        <label for="speed">
            Election timeout between @(FormatMilliSeconds(150 * ServerSimulatioNode.IntervalScaleValue)) and
            @(FormatMilliSeconds(300 * ServerSimulatioNode.IntervalScaleValue)) seconds
            <br>
            <input type="range" id="speed" name="speed" min="1" max="150" @bind:event="oninput"
                @bind=ServerSimulatioNode.IntervalScaleValue @onchange=UpdateTimer />
        </label>
    </div>
    <label for="NetworkRequestDelay">
        Network Delay @FormatMilliSeconds(ServerSimulatioNode.NetworkRequestDelay) seconds
        <br>
        <input type="range" id="NetworkRequestDelay" name="NetworkRequestDelay" min="10" max="10000"
            @bind:event="oninput" @bind=ServerSimulatioNode.NetworkRequestDelay />
    </label>
</div>

<div class="d-flex gap-5">
    @foreach (var node in nodes)
    {
        var timeoutRemaining = DateTime.Now - node._innerServerNode.ElectionTimerStartedAt;
        var maxIntervalMilliseconds = 300 * ServerSimulatioNode.IntervalScaleValue;
        var percentageRemaining = (int)(100 * (Math.Abs(timeoutRemaining.TotalMilliseconds) / maxIntervalMilliseconds));

        <div class="d-flex flex-column gap-2 border border-black p-3">
            <p>@node.NodeId</p>
            <p>@node.State</p>
            <p>@node.ElectionTimer.Interval</p>
            <p>Current Term: @node.CurrentTerm</p>
            <p>Leader is @node.LeaderNodeId</p>
            <div class="progress" role="progressbar" aria-label="Basic example"
                aria-valuenow=@(Math.Abs(timeoutRemaining.TotalMilliseconds)) aria-valuemin="0"
                aria-valuemax="@(maxIntervalMilliseconds)">
                <div class="progress-bar bg-dark-subtle" style="width: @percentageRemaining%;">@percentageRemaining</div>
            </div>
        </div>
    }
</div>

@code {
    private List<ServerSimulatioNode> nodes = [];
    Timer? timer;
    public void startSimulation()
    {
        var node1 = new ServerNode([]);
        Thread.Sleep(100);
        var node2 = new ServerNode([]);
        Thread.Sleep(100);
        var node3 = new ServerNode([]);
        Thread.Sleep(100);


        node1.AddNeighbors([node2, node3]);
        node2.AddNeighbors([node1, node3]);
        node3.AddNeighbors([node1, node2]);

        node1.timeoutForTimer = 200;
        node2.timeoutForTimer = 200;
        node3.timeoutForTimer = 200;

        var simulation1 = new ServerSimulatioNode(node1);
        var simulation2 = new ServerSimulatioNode(node2);
        var simulation3 = new ServerSimulatioNode(node3);

        nodes = [simulation1, simulation2, simulation3];

        timer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, 200);
    }

    public static string FormatMilliSeconds(double milliSeconds)
    {
        return $"{milliSeconds / 1000.0:F1}";
    }
    public void UpdateTimer()
    {
        timer?.Dispose();
        timer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, 100 * (int)ServerSimulatioNode.IntervalScaleValue);
    }
}